{"remainingRequest":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/pgull/Documents/GitHub/pbproofreads/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pgull/Documents/GitHub/pbproofreads/src/views/Draft.vue?vue&type=template&id=404c8757&scoped=true&","dependencies":[{"path":"/Users/pgull/Documents/GitHub/pbproofreads/src/views/Draft.vue","mtime":1599585558864},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGF0dHJzOiB7IGlkOiAiaG9tZXBhZ2UiLCAiZGF0YS1zY3JvbGxiYXIiOiAiIiB9IH0sCiAgICBbCiAgICAgIF9jKCJIZXJvUGFuZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgaGVhZGVyOiAiQmV0dGVyIHRoYW4gc3BlbGwgY2hlY2suIiwKICAgICAgICAgIGJvZHk6ICJGcm9tIGZpY3Rpb24gdG8gdGVybSBwYXBlcnMsIGxldCdzIG1ha2UgeW91ciB3b3JrIGxvb2sgZ3JlYXQuIiwKICAgICAgICAgIGN0YTogIkdldCBzdGFydGVkIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF9jKCJXaGl0ZUJsb2NrIiwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2stbGVmdCIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgImRhdGEtYW9zIjogImZhZGUtdXAiLCAiZGF0YS1hb3MtZHVyYXRpb24iOiAiMTAwMCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgSXQncyB0aGUgYmVzdCB3YXnCrSB0byBmaW5pc2ggIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KCIgeW91ciB3cml0aW5nIHByb2plY3QiKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgeyBhdHRyczogeyAiZGF0YS1hb3MiOiAiZmFkZS11cCIsICJkYXRhLWFvcy1kdXJhdGlvbiI6ICIxMDAwIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIldlJ2xsIHRha2Ugd2hhdGV2ZXIgeW91IGhhdmUgYW5kIG1ha2UgIiksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX3ZtLl92KCIgeW91IGxvb2sgbGlrZSBhIGhlY2tpbicgcm9ja3N0YXIuIikKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2stcmlnaHQiIH0sIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidXBwZXIiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy91c2VyMC5wbmciKSB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiR3JleUJsb2NrIiwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2VudGVyLXRleHQiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiaDIiLAogICAgICAgICAgICB7IGF0dHJzOiB7ICJkYXRhLWFvcyI6ICJmYWRlLXVwIiwgImRhdGEtYW9zLWR1cmF0aW9uIjogIjEwMDAiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiSG93IGl0IHdvcmtzOiIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW52aXNpY2FyZCIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgImRhdGEtYW9zIjogImZhZGUtdXAiLAogICAgICAgICAgICAgICJkYXRhLWFvcy1kdXJhdGlvbiI6ICIxMDAwIiwKICAgICAgICAgICAgICAiZGF0YS1hb3MtZGVsYXkiOiAiMCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvcXVvdGUucG5nIikgfSB9KSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiR2V0IGEgcXVvdGUiKV0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImludmlzaWNhcmQiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICJkYXRhLWFvcyI6ICJmYWRlLXVwIiwKICAgICAgICAgICAgICAiZGF0YS1hb3MtZHVyYXRpb24iOiAiMTAwMCIsCiAgICAgICAgICAgICAgImRhdGEtYW9zLWRlbGF5IjogIjMwMCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvc3VibWl0LnBuZyIpIH0gfSksCiAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIlN1Ym1pdCB5b3VyIHdvcmsiKV0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImludmlzaWNhcmQiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICJkYXRhLWFvcyI6ICJmYWRlLXVwIiwKICAgICAgICAgICAgICAiZGF0YS1hb3MtZHVyYXRpb24iOiAiMTAwMCIsCiAgICAgICAgICAgICAgImRhdGEtYW9zLWRlbGF5IjogIjYwMCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvZW5oYW5jZS5wbmciKSB9IH0pLAogICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KCJXZSdsbCBlbmhhbmNlIGl0IildKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnZpc2ljYXJkIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAiZGF0YS1hb3MiOiAiZmFkZS11cCIsCiAgICAgICAgICAgICAgImRhdGEtYW9zLWR1cmF0aW9uIjogIjEwMDAiLAogICAgICAgICAgICAgICJkYXRhLWFvcy1kZWxheSI6ICI5MDAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL3B1Ymxpc2gucG5nIikgfSB9KSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiR28gcHVibGlzaCEiKV0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImNlbnRlci1idXR0b24iIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJCdXR0b24iLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRleHQ6ICJHZXQgc3RhcnRlZCIsCiAgICAgICAgICAgICAgICAiZGF0YS1hb3MiOiAiZmFkZS11cCIsCiAgICAgICAgICAgICAgICAiZGF0YS1hb3MtZHVyYXRpb24iOiAiMTAwMCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJXaGl0ZUJsb2NrIiwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2VudGVyLXRleHQiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiaDIiLAogICAgICAgICAgICB7IGF0dHJzOiB7ICJkYXRhLWFvcyI6ICJmYWRlLXVwIiwgImRhdGEtYW9zLWR1cmF0aW9uIjogIjEwMDAiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiTGV0J3MgdGFsayBhYm91dCB5b3VyIHByb2plY3QiKV0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgIkdyZXlCbG9jayIsCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJob29wZXIiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGl0ZW1zVG9TaG93OiAxLjc1LAogICAgICAgICAgICAgICAgY2VudGVyTW9kZTogdHJ1ZSwKICAgICAgICAgICAgICAgIGluZmluaXRlU2Nyb2xsOiB0cnVlLAogICAgICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUsCiAgICAgICAgICAgICAgICBwbGF5U3BlZWQ6IDUwMDAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygic2xpZGUiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlc3RpbW9ueS1jYXJkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGVzdGltb255LWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvbm9waWMucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTYW5keSBDaGVla3MgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCIgQXV0aG9yIG9mIFRoZSBEb21lICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJJZiB5b3UgZ2V0IHRoZSBjaGFuY2UgdG8gaGF2ZSBQYXVsYSB0YWtlIGEgbG9vayBhdCB5b3VyIHdyaXRpbmfigJR3aGV0aGVyIGl04oCZcyBhIG5vdmVsLCBhIG5vdmVsbGEsIG9yIGFueSBvdGhlciB3b3Jr4oCUc25hcCBpdCB1cCEgV2hlbiBpdCBjb21lcyB0byBwcm9vZnJlYWRlcnMsIHNoZeKAmXMgdGhlIHZlcnkgYmVzdC4gU2hl4oCZcyBnb3QgYSBkZWFkZXllIGZvciBncmFtbWFyIGFuZCBwdW5jdHVhdGlvbiBlcnJvcnMsIGFuZCBzaGUgYWxzbyBwb2ludHMgb3V0IChnZW50bHksIGJsZXNzIGhlcikgd29yZCBjaG9pY2UgZXJyb3JzLiBOb3Qgb25seSB0aGF0LCBzaGXigJlzIGEgZ3JlYXQgZ3VpZGUsIHRlYWNoaW5nIG1lIHdoeSBhIGNlcnRhaW4gdmVyYiB0ZW5zZSBuZWVkcyB0byBiZSBjaGFuZ2VkLCBzbyB0aGF0IEkgY2FuIGludGVybmFsaXplIHRoZSB1c2FnZSBhbmQgaW1wcm92ZSB0aGUgbmV4dCB0aW1lLiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic2xpZGUiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlc3RpbW9ueS1jYXJkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGVzdGltb255LWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvbm9waWMucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTYW5keSBDaGVla3MgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCIgQXV0aG9yIG9mIFRoZSBEb21lICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJJZiB5b3UgZ2V0IHRoZSBjaGFuY2UgdG8gaGF2ZSBQYXVsYSB0YWtlIGEgbG9vayBhdCB5b3VyIHdyaXRpbmfigJR3aGV0aGVyIGl04oCZcyBhIG5vdmVsLCBhIG5vdmVsbGEsIG9yIGFueSBvdGhlciB3b3Jr4oCUc25hcCBpdCB1cCEgV2hlbiBpdCBjb21lcyB0byBwcm9vZnJlYWRlcnMsIHNoZeKAmXMgdGhlIHZlcnkgYmVzdC4gU2hl4oCZcyBnb3QgYSBkZWFkZXllIGZvciBncmFtbWFyIGFuZCBwdW5jdHVhdGlvbiBlcnJvcnMsIGFuZCBzaGUgYWxzbyBwb2ludHMgb3V0IChnZW50bHksIGJsZXNzIGhlcikgd29yZCBjaG9pY2UgZXJyb3JzLiBOb3Qgb25seSB0aGF0LCBzaGXigJlzIGEgZ3JlYXQgZ3VpZGUsIHRlYWNoaW5nIG1lIHdoeSBhIGNlcnRhaW4gdmVyYiB0ZW5zZSBuZWVkcyB0byBiZSBjaGFuZ2VkLCBzbyB0aGF0IEkgY2FuIGludGVybmFsaXplIHRoZSB1c2FnZSBhbmQgaW1wcm92ZSB0aGUgbmV4dCB0aW1lLiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic2xpZGUiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlc3RpbW9ueS1jYXJkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGVzdGltb255LWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvbm9waWMucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIiBTYW5keSBDaGVla3MgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCIgQXV0aG9yIG9mIFRoZSBEb21lICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJJZiB5b3UgZ2V0IHRoZSBjaGFuY2UgdG8gaGF2ZSBQYXVsYSB0YWtlIGEgbG9vayBhdCB5b3VyIHdyaXRpbmfigJR3aGV0aGVyIGl04oCZcyBhIG5vdmVsLCBhIG5vdmVsbGEsIG9yIGFueSBvdGhlciB3b3Jr4oCUc25hcCBpdCB1cCEgV2hlbiBpdCBjb21lcyB0byBwcm9vZnJlYWRlcnMsIHNoZeKAmXMgdGhlIHZlcnkgYmVzdC4gU2hl4oCZcyBnb3QgYSBkZWFkZXllIGZvciBncmFtbWFyIGFuZCBwdW5jdHVhdGlvbiBlcnJvcnMsIGFuZCBzaGUgYWxzbyBwb2ludHMgb3V0IChnZW50bHksIGJsZXNzIGhlcikgd29yZCBjaG9pY2UgZXJyb3JzLiBOb3Qgb25seSB0aGF0LCBzaGXigJlzIGEgZ3JlYXQgZ3VpZGUsIHRlYWNoaW5nIG1lIHdoeSBhIGNlcnRhaW4gdmVyYiB0ZW5zZSBuZWVkcyB0byBiZSBjaGFuZ2VkLCBzbyB0aGF0IEkgY2FuIGludGVybmFsaXplIHRoZSB1c2FnZSBhbmQgaW1wcm92ZSB0aGUgbmV4dCB0aW1lLiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}