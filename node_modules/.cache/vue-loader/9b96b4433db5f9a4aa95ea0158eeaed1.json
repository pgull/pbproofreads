{"remainingRequest":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/pgull/Documents/GitHub/pbproofreads/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pgull/Documents/GitHub/pbproofreads/src/views/Draft.vue?vue&type=template&id=404c8757&scoped=true&","dependencies":[{"path":"/Users/pgull/Documents/GitHub/pbproofreads/src/views/Draft.vue","mtime":1599689447153},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pgull/Documents/GitHub/pbproofreads/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}